"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, <FULL NAME> and <FULL NAME>, this 
programming assignment is my own work and I have not provided this code to 
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1:
UT EID 2:
"""


# Iterates over a 2D list from left to right, then top to bottom
# and returning the coordinates (row, column).
def row_major_traversal(grid):
    row_count = len(grid)
    col_count = len(grid[0])

    if len(grid) > 10:
        print("Matrix larger than 10")

    final_list = []

    # Iterate through each individual row based on grid size
    for row in range(row_count):
        # Iterate through each row to keep track of columns
        for col in range(col_count):
            final_list.append((row,col))


    return final_list

# Iterates over a 2D list from left to right, then top to bottom
# and returning the coordinates (row, column).
def column_major_traversal(grid):
    row_count = len(grid)
    col_count = len(grid[0])

    if len(grid) > 10:
        print("Matrix larger than 10")

    final_list = []

    for col in range(col_count):
        for row in range(row_count):
            final_list.append((row, col))

    return final_list

# Iterates over a 2D list from top to bottom then left to right
# and returning the coordinates (row, column).
def row_zigzag_traversal(grid):
    row_count = len(grid)
    col_count = len(grid[0])

    if len(grid) > 10:
        print("Matrix larger than 10")

    final_list = []

    for row in range(row_count):
        if row % 2 != 0:
            # Iterate through each row to keep track of columns
            for col in range(col_count -1, -1, -1):
                final_list.append((row,col))
        else:
            for col in range(col_count):
                final_list.append((row, col))


    return final_list

# Iterates over a 2D list by alternating between iterating
# left to right and right to left, going from top to bottom
# and returning the coordinates (row, column).
def column_zigzag_traversal(grid):
    row_count = len(grid)
    col_count = len(grid[0])

    if len(grid) > 10:
        print("Matrix larger than 10")

    final_list = []

    for col in range(col_count):
        if col % 2 != 0:
            # Iterate through each row to keep track of columns
            for row in range(row_count -1, -1, -1):
                final_list.append((row,col))
        else:
            for row in range(row_count):
                final_list.append((row, col))


    return final_list



# Iterates over a 2D list from the top-right to the bottom-left
# in the direction of the main diagonal and returning the
# coordinates (row, column).
def main_diagonal_traversal(grid):
    row_count = len(grid)
    col_count = len(grid[0])

    if len(grid) > 10:
        print("Matrix larger than 10")

    final_list = []

    # Iterate from the last column backwards and append the row and column to the list
    # of coordinates. Use a while loop to account for different grid sizes
    # and append the coordinates than increase the row and column
    # until there the coordinates are outside the grid. Once you get to the left most coordinate
    # on the first row then iterate down 

    for last_col in range(col_count - 1, -1, -1):
        row = 0
        col = last_col

        while row < row_count and col < col_count:
            final_list.append((row, col))
            row += 1
            col += 1

    for second_row in range(1, row_count):
        row = second_row
        col = 0

        while row < row_count and col < col_count:
            final_list.append((row,col))
            row += 1
            col += 1

    return final_list



# Iterates over a 2D list from the top-left to the bottom-right
# in the direction of the secondary diagonal and returning the
# coordinates (row, column).
def secondary_diagonal_traversal(grid):
    row_count = len(grid)
    col_count = len(grid[0])

    if len(grid) > 10:
        print("Matrix larger than 10")

    final_list = []
    
    for column in range(col_count):
        col = column
        row = 0
        
        while column >= 0 and row 


    
    
    return final_list


# Iterates over a 2D list in spiral order and returning the
# coordinates (row, column).
def spiral_traversal(grid):
    return []
